// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  phone                 String?
  streetAddress         String?
  city                  String?
  postcode              String?
  country               String?
  isOAuth               Boolean                @default(false)
  Orders                Order[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// seperate for security reason
model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  MenuItem MenuItem[]
}

type AddonType {
  name  String
  price String
}

model MenuItem {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  image            String
  description      String
  categoryName     String
  category         Category    @relation(fields: [categoryName], references: [name])
  basePrice        String
  sizes            AddonType[]
  extraIngredients AddonType[]
  bestSeller       Boolean
}

type CartItemType {
  id          String      @db.ObjectId
  name        String
  image       String
  description String
  basePrice   String
  size        AddonType?
  extras      AddonType[]
  subPrice    String
}

enum OrderStatus {
  PAID
  PENDING
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  phone          String?
  streetAddress  String?
  city           String?
  postcode       String?
  country        String?
  purchaserEmail String
  purchasedItems CartItemType[]
  user           User?          @relation(fields: [customerId], references: [id])
  customerId     String?        @db.ObjectId
  status         OrderStatus    @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}
